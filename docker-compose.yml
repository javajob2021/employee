services:
  # ------------------------------
  # MySQL
  # ------------------------------
  mysql:
    image: mysql:8.0
    container_name: hr-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: hrdb
      MYSQL_USER: hr
      MYSQL_PASSWORD: hrpw
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - ./infra/db/init:/docker-entrypoint-initdb.d:ro
      - mysql_data:/var/lib/mysql
    networks: [app]

  # ------------------------------
  # Spring Boot backend
  # ------------------------------
  hr-backend:
    container_name: hr-backend
    build:
      context: ./hr-backend
      dockerfile: Dockerfile
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:mysql://mysql:3306/hrdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      DB_USER: hr
      DB_PASS: hrpw
    # container listens on 8080; expose host 8082
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep '\"status\":\"UP\"' || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
    # add labels so Promtail/Grafana have nice dimensions
    labels:
      compose_service: hr-backend
      project: employee
    networks: [app, monitoring]

  # ------------------------------
  # Angular frontend (Nginx)
  # ------------------------------
  hr-frontend:
    container_name: hr-frontend
    build:
      context: ./hr-frontend
      dockerfile: Dockerfile
    restart: always
    depends_on:
      hr-backend:
        condition: service_healthy
    ports:
      - "8083:80"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost/ | grep -i '<title' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    labels:
      compose_service: hr-frontend
      project: employee
    networks: [app]

  # ------------------------------
  # Prometheus
  # ------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    depends_on:
      - hr-backend
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks: [monitoring]

  # ------------------------------
  # Grafana
  # ------------------------------
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    depends_on:
      - prometheus
      - loki
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./infra/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks: [monitoring]

  # ------------------------------
  # Loki (single-node / memberlist, no Consul)
  # ------------------------------
  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    command: -config.file=/etc/loki/config.yml
    ports:
      - "3100:3100"
    volumes:
      - ./infra/loki/config.yml:/etc/loki/config.yml:ro   # <- use memberlist config
      - loki_data:/loki
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always
    networks: [monitoring]

  # ------------------------------
  # Promtail (collect Docker logs)
  # ------------------------------
  promtail:
    image: grafana/promtail:2.9.8
    container_name: promtail
    restart: always
    depends_on:
      - loki
    ports:
      - "9080:9080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro  # <-- add this
      - ./infra/promtail/promtail.yml:/etc/promtail/promtail.yml:ro
    command: -config.file=/etc/promtail/promtail.yml
    networks: [monitoring]

networks:
  app:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  mysql_data:
  grafana_data:
  loki_data:
