apiVersion: v1
kind: ConfigMap
metadata:
  name: hr-backend-config
  namespace: hr-system
data:
  SPRING_PROFILES_ACTIVE: prod
  DB_HOST: mysql.hr-system.svc.cluster.local
  DB_NAME: hrdb
  DB_USER: hr
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,prometheus"
---
apiVersion: v1
kind: Secret
metadata:
  name: hr-backend-secret
  namespace: hr-system
type: Opaque
stringData:
  DB_PASSWORD: hrpass
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hr-backend
  namespace: hr-system
spec:
  replicas: 1
  selector:
    matchLabels: { app: hr-backend }
  template:
    metadata:
      labels: { app: hr-backend }
      annotations:
        # Prometheus scrape (if you add kube-prometheus later)
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      containers:
        - name: hr-backend
          image: hr-backend:0.1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_PROFILES_ACTIVE
              valueFrom: { configMapKeyRef: { name: hr-backend-config, key: SPRING_PROFILES_ACTIVE } }
            - name: DB_HOST
              valueFrom: { configMapKeyRef: { name: hr-backend-config, key: DB_HOST } }
            - name: DB_NAME
              valueFrom: { configMapKeyRef: { name: hr-backend-config, key: DB_NAME } }
            - name: DB_USER
              valueFrom: { configMapKeyRef: { name: hr-backend-config, key: DB_USER } }
            - name: DB_PASSWORD
              valueFrom: { secretKeyRef: { name: hr-backend-secret, key: DB_PASSWORD } }
          readinessProbe:
            httpGet: { path: /actuator/health/readiness, port: 8080 }
            initialDelaySeconds: 20
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: /actuator/health/liveness, port: 8080 }
            initialDelaySeconds: 40
            periodSeconds: 10
          resources:
            requests: { cpu: "100m", memory: "256Mi" }
            limits:   { cpu: "500m", memory: "512Mi" }
---
apiVersion: v1
kind: Service
metadata:
  name: hr-backend
  namespace: hr-system
spec:
  selector: { app: hr-backend }
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  type: ClusterIP
